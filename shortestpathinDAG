class solution{
private:
          void dfs(int node,vector<pair<int,int>>adj[],int vis[],stack<int>&st){
          vis[node]=1;
          for(auto it : adj[node]){
            if(!vis[it]){
              dfs(it,adj,vis,st);
              }
              }
              st.push(node);
              }

public:

     vector<int> shortestPath(int N , int M , vector<int>edges[]){
     vector<pair<int,int>>adj[N];
     for(int i =0; i<N;i++){
      int u = edges[i][0];
      int v = edges[i][1];
      int wt = edges[i][2];
      adj[u].push_back({v,wt});
      }
      
      // find the topo sort using dfs
       
       int vis[N]={0};
       stack<int>st;
       
       for(int i=0;i<M;i++){
         if(!vis[i]){
           dfs(i,adj,vis,st);
           }
       }
      vector<int>dist(N);
      
      for(int i =0; i<N;i++){
      dist[i]=INT_MAX;
      }
      dist[0]=0;
       while(!st.empty()){
       int node = st.top();
        st.pop();
        for(auto it: adj[node]){
            int v= it.first;
            int wt=it.second;
            
            if(dist[node]+wt<dist[v]){
            dist[v]=dist[node]+wt;
      }
      }
       return dist;

}
};
